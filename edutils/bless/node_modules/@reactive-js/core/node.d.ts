/// <reference types="node" />
import { SideEffect1, SideEffect2, Factory, Function1, SideEffect3, Function2, SideEffect4, Function3, SideEffect5, Function4, SideEffect6, Function5 } from './functions';
import { DisposableValueLike } from './disposable';
import { ObservableLike } from './observable';
import { IOSourceLike, IOSinkLike, IOSourceOperator } from './io';
import { BrotliOptions, ZlibOptions } from 'zlib';
import fs from 'fs';
import { Readable, Writable, Transform } from 'stream';

declare function bindNodeCallback<T>(callbackFunc: SideEffect1<SideEffect2<unknown, T>>): Factory<ObservableLike<T>>;
declare function bindNodeCallback(callbackFunc: SideEffect1<SideEffect1<unknown>>): Factory<ObservableLike<void>>;
declare function bindNodeCallback<A1, T>(callbackFunc: SideEffect2<A1, SideEffect2<unknown, T>>): Function1<A1, ObservableLike<T>>;
declare function bindNodeCallback<A1>(callbackFunc: SideEffect2<A1, SideEffect1<unknown>>): Function1<A1, ObservableLike<void>>;
declare function bindNodeCallback<A1, A2, T>(callbackFunc: SideEffect3<A1, A2, SideEffect2<unknown, T>>): Function2<A1, A2, ObservableLike<T>>;
declare function bindNodeCallback<A1, A2>(callbackFunc: SideEffect3<A1, A2, SideEffect1<unknown>>): Function2<A1, A2, ObservableLike<void>>;
declare function bindNodeCallback<A1, A2, A3, T>(callbackFunc: SideEffect4<A1, A2, A3, SideEffect2<unknown, T>>): Function3<A1, A2, A3, ObservableLike<T>>;
declare function bindNodeCallback<A1, A2, A3>(callbackFunc: SideEffect4<A1, A2, A3, SideEffect1<unknown>>): Function3<A1, A2, A3, ObservableLike<void>>;
declare function bindNodeCallback<A1, A2, A3, A4, T>(callbackFunc: SideEffect5<A1, A2, A3, A4, SideEffect2<unknown, T>>): Function4<A1, A2, A3, A4, ObservableLike<T>>;
declare function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: SideEffect5<A1, A2, A3, A4, SideEffect1<unknown>>): Function4<A1, A2, A3, A4, ObservableLike<void>>;
declare function bindNodeCallback<A1, A2, A3, A4, A5, T>(callbackFunc: SideEffect6<A1, A2, A3, A4, A5, SideEffect2<unknown, T>>): Function5<A1, A2, A3, A4, A5, ObservableLike<T>>;
declare function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: SideEffect6<A1, A2, A3, A4, A5, SideEffect1<unknown>>): Function5<A1, A2, A3, A4, A5, ObservableLike<void>>;

declare const createReadableIOSource: (factory: Factory<DisposableValueLike<Readable>>) => IOSourceLike<Uint8Array>;
declare const readFileIOSource: (path: fs.PathLike, options?: {
    readonly flags?: string | undefined;
    readonly mode?: number | undefined;
    readonly start?: number | undefined;
    readonly end?: number | undefined;
    readonly highWaterMark?: number | undefined;
} | undefined) => IOSourceLike<Uint8Array>;

declare const createWritableIOSink: (factory: Factory<DisposableValueLike<Writable>>) => IOSinkLike<Uint8Array>;

declare const createDisposableNodeStream: <T extends Readable | Writable | Transform>(stream: T) => DisposableValueLike<T>;

declare const transform: (factory: Factory<DisposableValueLike<Transform>>) => IOSourceOperator<Uint8Array, Uint8Array>;
declare const brotliDecompress: (options?: BrotliOptions) => IOSourceOperator<Uint8Array, Uint8Array>;
declare const gunzip: (options?: ZlibOptions) => IOSourceOperator<Uint8Array, Uint8Array>;
declare const inflate: (options?: ZlibOptions) => IOSourceOperator<Uint8Array, Uint8Array>;
declare const brotliCompress: (options?: BrotliOptions) => IOSourceOperator<Uint8Array, Uint8Array>;
declare const gzip: (options?: ZlibOptions) => IOSourceOperator<Uint8Array, Uint8Array>;
declare const deflate: (options?: ZlibOptions) => IOSourceOperator<Uint8Array, Uint8Array>;

export { bindNodeCallback, brotliCompress, brotliDecompress, createDisposableNodeStream, createReadableIOSource, createWritableIOSink, deflate, gunzip, gzip, inflate, readFileIOSource, transform };
