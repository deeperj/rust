import { Option } from './option';
import { SchedulerLike } from './scheduler';
import { ObservableLike } from './observable';
import { ReactElement, Component } from 'react';

/**
 * Returns the current value, if defined, of `observable`.
 *
 * @param observable The `ObservableLike` to subscribe to.
 * @param scheduler An optional scheduler used when subscribing to `observable`. The default
 * is React's normal priority scheduler.
 */
declare const useObservable: <T>(observable: ObservableLike<T>, options?: {
    readonly scheduler?: SchedulerLike;
}) => Option<T>;
declare const createComponent: <TProps>(fn: (props: ObservableLike<TProps>) => ObservableLike<ReactElement>) => (props: TProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> | null;
/** Scheduler that schedules work on React's internal priority scheduler with idle priority. */
declare const idlePriority: SchedulerLike;
/** Scheduler that schedules work on React's internal priority scheduler with immediate priority. */
declare const immediatePriority: SchedulerLike;
/** Scheduler that schedules work on React's internal priority scheduler with normal priority. */
declare const normalPriority: SchedulerLike;
/** Scheduler that schedules work on React's internal priority scheduler with low priority. */
declare const lowPriority: SchedulerLike;
/** Scheduler that schedules work on React's internal priority scheduler with user blocking priority. */
declare const userBlockingPriority: SchedulerLike;

export { createComponent, idlePriority, immediatePriority, lowPriority, normalPriority, useObservable, userBlockingPriority };
